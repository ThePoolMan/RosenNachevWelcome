import asyncio
from datetime import datetime
from typing import Union
from loguru import logger

from aiogram.utils.exceptions import MessageToDeleteNotFound, ChatNotFound
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery, Message, ChatType

from keyboards.inline.menu_keyboards import *
from utils.permissions import *
from utils.db_api import db
from data import config

from loader import dp, bot

logger.add("INFO.log", format="{time} {level} {message}", level="INFO", rotation="1000 KB", compression="zip")

DELAY_DELETE_MESSAGE = 25
members = {}
flags = {'flag': True}


@dp.message_handler(content_types=['left_chat_member'])
async def left_member(message):
    if message.left_chat_member.id == 2008419805:
        all_chats = db.select_data_db("rosennachev_welcome_bot", "chats")
        for _ in all_chats:
            if message.chat.id == _[1]:
                db.delete_data_db("rosennachev_welcome_bot", "chats", f"chat_id = '{message.chat.id}'",
                                  "delete_records")
                logger.info(f"User: {message.from_user.username}, Action: delete chat")


@dp.message_handler(content_types=['new_chat_members'])
async def new_member(message):
    if not str(message.from_user.id) in config.ADMINS:
        await bot.leave_chat(message.chat.id)
        logger.error(f"Please change anonymous rights for administrator or you are not administrator")
        return

    # –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    user_join_message_id = message.message_id
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞
    user = message.new_chat_members[len(message.new_chat_members) - 1]

    if user.id == 2008419805:
        response = await bot.get_updates()
        pop_request = response.pop()
        try:
            chat_id = pop_request.message.chat.id
            chat_title = pop_request.message.chat.title
        except:
            chat_id = pop_request.my_chat_member.chat.id
            chat_title = pop_request.my_chat_member.chat.title
        now_time = datetime.now()
        db.insert_user_into_db("rosennachev_welcome_bot", "chats", chat_id, now_time, chat_title)
        logger.info(f"User: {message.from_user.username}, Action: add chat")

        await asyncio.sleep(120)
        try:
            await bot.delete_message(message.chat.id, user_join_message_id)
            await bot.delete_message(message.chat.id, user_join_message_id + 1)
        except:
            logger.error(f"Error delete message")
        return

    flags.update(flag=True)

    new_members_permissions = set_new_user_permissions()
    await bot.restrict_chat_member(
        chat_id=message.chat.id,
        user_id=user.id,
        permissions=new_members_permissions,
    )

    await message.reply(
        (
            f"{user.get_mention(as_html=True)}, <b>–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ —á–∞—Ç–∞!\n"
            "–ü–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ, —á–µ –Ω–µ —Å—Ç–µ –±–æ—Ç, –∫–∞—Ç–æ —â—Ä–∞–∫–Ω–µ—Ç–µ –≤—ä—Ä—Ö—É –µ–¥–∏–Ω –æ—Ç –±—É—Ç–æ–Ω–∏—Ç–µ –ø–æ-–¥–æ–ª—É\n"
            "–í–†–ï–ú–ï –ó–ê –û–¢–ì–û–í–û–† 30 –°–ï–ö–£–ù–î–ò!</b>\n"

        ),
        reply_markup=generate_confirm_markup(user.id, user_join_message_id)
    )
    logger.info(f"User: {user.username}, has join in chat")
    await asyncio.sleep(25)

    if flags.get('flag'):
        try:
            await bot.delete_message(message.chat.id, user_join_message_id)
            await bot.delete_message(message.chat.id, user_join_message_id + 1)
        except MessageToDeleteNotFound:
            print("I get error: MessageToDeleteNotFound")
        await message.chat.kick(user.id)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /menu
@dp.message_handler(Command("menu"), chat_type=ChatType.PRIVATE)
async def show_menu(message: types.Message):
    await message.delete()
    if str(message.from_user.id) in config.ADMINS:
        await list_menu(message)


# –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def list_menu(message: Union[CallbackQuery, Message], **kwargs):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–≥–¥–µ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    markup = await menu_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞ —Ç–∏–ø –∞–ø–¥–µ–π—Ç–∞. –ï—Å–ª–∏ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(message, Message):
        await message.answer("<b>üóÇ–ú–µ–Ω—é</b>", reply_markup=markup)

    # –ï—Å–ª–∏ CallbackQuery - –∏–∑–º–µ–Ω—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif isinstance(message, CallbackQuery):
        call = message
        await call.message.edit_text(text="<b>üóÇ–ú–µ–Ω—é</b>", reply_markup=markup)


async def chose_chats_for_delete(callback: CallbackQuery, _chosen, **kwargs):
    all_chats = db.select_data_db("rosennachev_welcome_bot", "chats")
    result = []

    for _ in all_chats:
        result.append({"id": _[0], "tittle": _[3], "chat_id": _[1]})

    markup = await delete_chats_check_keyboard(result, _chosen)
    await callback.message.edit_text(text="<b>üóë–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ —á–∞—Ç –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ</b>",
                                     reply_markup=markup)


async def delete_chats_check(callback: CallbackQuery, _chosen, **kwargs):
    markup = await delete_chats_keyboard(_chosen)

    await callback.message.edit_text(text="<b>üóë–°–∏–≥—É—Ä–µ–Ω –ª–∏ —Å–∏, —á–µ –∏—Å–∫–∞—à –¥–∞ –∏–∑—Ç—Ä–∏–µ—à?</b>",
                                     reply_markup=markup)


async def delete_chat(callback: CallbackQuery, _chosen, _values, **kwargs):
    if _chosen == "yes":
        bad_request = ''
        try:
            await bot.leave_chat(_values)
        except ChatNotFound:
            bad_request = "\n" + str(ChatNotFound.text)
        db.delete_data_db("rosennachev_welcome_bot", "chats", f"chat_id = '{_values}'", "delete_records")
        logger.info(f"User: {callback.from_user.username}, Action: delete chat" + bad_request)

    await chose_chats_for_delete(callback, "delete_chats_check")


async def show_all_chats(callback: CallbackQuery, _chosen, _values, **kwargs):
    all_chats = db.select_data_db("rosennachev_welcome_bot", "chats")

    markup = await list_chats_keyboard()

    result = ""
    for _ in all_chats:
        text = f"<b>–ß–∞—Ç {_[3]}\n–î–∞—Ç–∞ –Ω–∞ –¥–æ–±–∞–≤—è–Ω–µ –∫—ä–º —á–∞—Ç–∞ {_[2]}\n\n</b>"
        result += text

    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await callback.message.edit_text(text=f"<b>üí¨–°–ø–∏—Å—ä–∫ –Ω–∞ –≤—Å–∏—á–∫–∏ —á–∞—Ç–æ–≤–µ\n\n{result}</b>", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ–π –º–µ–Ω—é—à–∫–µ
@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: CallbackQuery, callback_data: dict):
    """

    :param call: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ CallbackQuery, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    :param callback_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_level = callback_data.get("level")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ù–ï –í–°–ï–ì–î–ê - –º–æ–∂–µ—Ç –±—ã—Ç—å 0)
    chosen = callback_data.get("chosen")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ù–ï –í–°–ï–ì–î–ê - –º–æ–∂–µ—Ç –±—ã—Ç—å 0)
    values = callback_data.get("values")

    # –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º "—É—Ä–æ–≤–Ω–∏" –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    levels = {
        "menu": list_menu,

        "chose_chats_for_delete": chose_chats_for_delete,  # –û—Ç–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "delete_chats_check": delete_chats_check,
        "delete_chat": delete_chat,

        "show_all_chats": show_all_chats,  # –û—Ç–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã

    }

    # –ó–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    current_level_function = levels[current_level]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    await current_level_function(
        call,
        _chosen=chosen,
        _values=values
    )


@dp.callback_query_handler(user_callback.filter())
async def callback_inline(query: types.CallbackQuery, callback_data: dict):
    being = callback_data.get("being")
    # –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–æ–π, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º int)
    user_id = int(callback_data.get("user_id"))
    # –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    user_join_message_id = int(callback_data.get("user_join_message_id"))
    # –∏ –∞–π–¥–∏ —á–∞—Ç–∞, –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω—É—é—â–µ–π –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤
    chat_id = int(query.message.chat.id)

    # –∫–æ–≥–¥–∞ –≤—ã—Ç—è–Ω—É–ª id –ø—Ä–æ–≤–µ—Ä—å –µ–≥–æ —Ç—É—Ç –∏ —ç—Ç–æ –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if query.from_user.id != user_id:
        await bot.answer_callback_query(
            query.id,
            text='–°—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –¥—Ä—É–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª! (This message for another user!)',
            show_alert=True
        )
        return

    flags.update(flag=False)

    # –¥–∞–ª–µ–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–Ω–æ–ø–∫—É "—á–µ–ª–æ–≤–µ–∫" —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º
    if being == "human":
        logger.info(f"User: {query.from_user.id}, select human")
        text = str("–ò–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ —á–∞—Ç–∞! You have access in our chat!")
        await bot.answer_callback_query(query.id,
                                        text=text,
                                        show_alert=True
                                        )
        try:
            await query.message.delete()
            welcome_message = user_join_message_id + 2
            await asyncio.sleep(5)
            await bot.delete_message(query.message.chat.id, welcome_message)
        except MessageToDeleteNotFound:
            logger.error("I get error: MessageToDeleteNotFound")

    # –∞ –µ—Å–ª–∏ –≤—Å—ë-—Ç–∞–∫–∏ –±–æ—Ç, —Ç–æ–∂–µ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –∏–±–æ —Ç–æ–ª—å–∫–æ —é–∑–µ—Ä–±–æ—Ç—ã –º–æ–≥—É—Ç –∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
    elif being == "bot":
        logger.info(f"User: {query.from_user.id}, select bot")
        text = str("–¢–∏ —Å–∏ –±–æ—Ç! –û—Ç–∫–∞–∑–∞–Ω –≤–∏ –µ –¥–æ—Å—Ç—ä–ø –¥–æ —á–∞—Ç–∞! You are bot and access is closed in our chat!")

        await bot.answer_callback_query(
            query.id,
            text=text,
            show_alert=True
        )
        await asyncio.sleep(10)
        await query.message.chat.kick(user_id)

        try:
            await bot.delete_message(query.message.chat.id, user_join_message_id)
            await query.message.delete()
        except MessageToDeleteNotFound:
            logger.error("I get error: MessageToDeleteNotFound")

    # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –≤—ã–¥–∞—Ç—å —é–∑–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
    new_permissions = set_new_user_approved_permissions()
    await bot.restrict_chat_member(
        chat_id=chat_id,
        user_id=user_id,
        permissions=new_permissions,
    )
